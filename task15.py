# -*- coding: utf-8 -*-
"""Task15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GPY1jxK5RZB-V6R5PJprCcvrmuEoMhdB
"""

!pip install colorama

# cli_tool.py

import argparse
import json
import os
from datetime import datetime
from colorama import init, Fore, Style

# Initialize colorama for colored terminal output
init(autoreset=True)

TASK_FILE = "tasks.json"



def load_tasks():
    if not os.path.exists(TASK_FILE):
        return []
    with open(TASK_FILE, "r") as f:
        return json.load(f)

def save_tasks(tasks):
    with open(TASK_FILE, "w") as f:
        json.dump(tasks, f, indent=2)

def add_task(description):
    tasks = load_tasks()
    task = {
        "id": len(tasks) + 1,
        "description": description,
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    tasks.append(task)
    save_tasks(tasks)
    print(Fore.GREEN + f" Task added: {description}")

def view_tasks():
    tasks = load_tasks()
    if not tasks:
        print(Fore.YELLOW + " No tasks found.")
        return
    print(Fore.CYAN + "\n Your To-Do List:")
    for task in tasks:
        print(Fore.WHITE + f"{task['id']}. {task['description']} (added {task['created_at']})")

def delete_task(task_id):
    tasks = load_tasks()
    filtered_tasks = [t for t in tasks if t["id"] != task_id]
    if len(filtered_tasks) == len(tasks):
        print(Fore.RED + f" Task with ID {task_id} not found.")
        return
    # Reassign IDs
    for i, t in enumerate(filtered_tasks, start=1):
        t["id"] = i
    save_tasks(filtered_tasks)
    print(Fore.RED + f" Deleted task ID {task_id}.")

# ---------------------- CLI Entry Point ------------------------

def main(argv=None):
    parser = argparse.ArgumentParser(
        description=" CLI To-Do List Manager",
        epilog="Example: python cli_tool.py add 'Read a book'"
    )

    subparsers = parser.add_subparsers(dest="command")

    # View command
    subparsers.add_parser("view", help="View all tasks")

    # Add command
    add_parser = subparsers.add_parser("add", help="Add a new task")
    add_parser.add_argument("description", type=str, help="Task description")

    # Delete command
    del_parser = subparsers.add_parser("delete", help="Delete a task by ID")
    del_parser.add_argument("id", type=int, help="Task ID to delete")

    args = parser.parse_args(argv)

    if args.command == "add":
        add_task(args.description)
    elif args.command == "view":
        view_tasks()
    elif args.command == "delete":
        delete_task(args.id)
    else:
        parser.print_help()

# Add a task
main(["add", "Finish the Day 16 CLI project"])

main(["add", "I have to submit the survey today"])