# -*- coding: utf-8 -*-
"""Task10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uKHiHFL-lTc8fIzfqF1Bc90oiHL_yVTd
"""

with open("inventory_utils.py", "w") as f:
    f.write('''import random\n\ndef restock_product(product, min_qty=5, max_qty=20):\n    additional_qty = random.randint(min_qty, max_qty)\n    product.quantity += additional_qty''')

# inventory_utils.py
import random

def restock_product(product, min_qty=5, max_qty=20):
    additional_qty = random.randint(min_qty, max_qty)
    product.quantity += additional_qty

# main.py
from inventory_utils import restock_product

class Product:
    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity

    def total_value(self):
        return self.price * self.quantity

class PerishableProduct(Product):
    def __init__(self, name, price, quantity, expiry_days):
        super().__init__(name, price, quantity)
        self.expiry_days = expiry_days

    def total_value(self):
        value = super().total_value()
        if self.expiry_days < 5:
            return round(value * 0.8, 2)  # 20% discount
        return value

class InventoryManager:
    def __init__(self):
        self.inventory = []

    def add_product(self, product):
        self.inventory.append(product)

    def list_inventory(self):
        print("\nInventory List:")
        for idx, item in enumerate(self.inventory, 1):
            print(f"{idx}. {item.name} → Qty: {item.quantity}, Value: {item.total_value()}")

    def search_by_name(self, term):
        print(f"\nSearch Results for '{term}':")
        results = list(filter(lambda p: term.lower() in p.name.lower(), self.inventory))
        if results:
            for item in results:
                print(f"{item.name} → Qty: {item.quantity}, Value: {item.total_value()}")
        else:
            print("No match found.")

    def restock_all(self):
        for product in self.inventory:
            restock_product(product)

    def export_summary(self, filename="inventory_report.txt"):
        with open(filename, "w") as f:
            f.write("Inventory Summary Report \n")
            f.write("----------------------------\n")
            [f.write(f"{item.name}: Qty = {item.quantity}, Total Value = {item.total_value()}\n")
             for item in self.inventory]
        print(f"\nReport exported to {filename}")

# --- Sample Usage ---
if __name__ == "__main__":
    manager = InventoryManager()

    # Adding products
    manager.add_product(Product("Apple", 5, 10))
    manager.add_product(PerishableProduct("Milk", 4, 5, expiry_days=3))
    manager.add_product(PerishableProduct("Yogurt", 3, 7, expiry_days=8))
    manager.add_product(Product("Bread", 2, 12))

    manager.list_inventory()
    manager.search_by_name("milk")
    manager.restock_all()
    print("\nAfter Restocking:")
    manager.list_inventory()
    manager.export_summary()