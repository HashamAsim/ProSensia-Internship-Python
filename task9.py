# -*- coding: utf-8 -*-
"""Task9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ae3m1RrXQR7w4hzNPMzkhuvyNGam5dja
"""

def read_marks_file(filepath):
    marks_dict = {}
    skipped_entries = 0

    try:
        with open(filepath, 'r') as file:
            for line_num, line in enumerate(file, start=1):
                line = line.strip()
                if not line:
                    print(f"[Line {line_num}] Skipping empty line.")
                    skipped_entries += 1
                    continue

                try:
                    name, mark = line.split(',')
                    name = name.strip()
                    mark = mark.strip()

                    if name == '' or mark == '':
                        raise ValueError("Missing name or mark.")

                    score = int(mark)
                    marks_dict[name] = score

                except ValueError as ve:
                    print(f"[Line {line_num}] Skipped invalid entry '{line}': {ve}")
                    skipped_entries += 1

    except FileNotFoundError:
        print("File not found. Please check the path and try again.")
        return None, None

    return marks_dict, skipped_entries


def print_summary(marks_dict, skipped_count):
    if not marks_dict:
        print("\nNo valid student data found.")
        return

    total = 0
    print("\nðŸ“‹ Student Marks:")
    for student, mark in marks_dict.items():
        print(f"{student} â†’ {mark}")
        total += mark

    try:
        avg = total / len(marks_dict)
        print(f"\n Average Marks: {avg:.2f}")
    except ZeroDivisionError:
        print("Can't compute average â€” no valid entries.")

    print(f"\n Skipped Entries: {skipped_count}")


while True:
    path = input("Enter path to marks file (e.g., marks.txt): ").strip()
    data, skipped = read_marks_file(path)

    if data is not None:
        print_summary(data, skipped)
        break